#!/bin/bash

readonly reset=$(tput sgr0)
readonly   red=$(tput bold; tput setaf 1)
readonly green=$(tput bold; tput setaf 2)

KUBE_HOOKS_DIR="$(dirname "$(test -L "$0" && echo "$(dirname $0)/$(readlink "$0")" || echo "$0")")"

exit_code=0

echo -ne "Checking for files that need gofmt... "
files_need_gofmt=()
files=($(git diff --cached --name-only --diff-filter ACM | grep "\.go" | grep -v -e "third_party" -e "Godeps"))
for file in "${files[@]}"; do
  # Check for files that fail gofmt.
  diff="$(git show ":${file}" | gofmt -s -d)"
  if [[ -n "$diff" ]]; then
    files_need_gofmt+=("${file}")
  fi
done

if [[ "${#files_need_gofmt[@]}" -ne 0 ]]; then
  echo "${red}ERROR!"
  echo "Some files have not been gofmt'd.  To fix these errors, "
  echo "cut and paste the following:"
  echo "  gofmt -s -w ${files_need_gofmt[@]}"
  exit_code=1
else
  echo "${green}OK"
fi
echo "${reset}"

echo -ne "Checking for files that need boilerplate... "
files_need_boilerplate=()
boiler="${KUBE_HOOKS_DIR}/boilerplate.py"
# Check for go files without the required boilerplate.
if [[ ${#files[@]} -gt 0 ]]; then
  files_need_boilerplate+=($("${boiler}" "go" "${files[@]}"))
fi

# Check for sh files without the required boilerplate.
files=($(git diff --cached --name-only --diff-filter ACM | grep "\.sh" | grep -v -e "third_party" -e "Godeps"))
if [[ ${#files[@]} -gt 0 ]]; then
  files_need_boilerplate+=($("${boiler}" "sh" "${files[@]}"))
fi

# Check for py files without the required boilerplate.
files=($(git diff --cached --name-only --diff-filter ACM | grep "\.py" | grep -v -e "third_party" -e "Godeps"))
if [[ ${#files} -gt 0 ]]; then
  files_need_boilerplate+=($("${boiler}" "py" "${files[@]}"))
fi

if [[ "${#files_need_boilerplate[@]}" -ne 0 ]]; then
  echo "${red}ERROR!"
  echo "Some files are missing the required boilerplate header"
  echo "from hooks/boilerplate.txt:"
  for file in "${files_need_boilerplate[@]}"; do
    echo "  ${file}"
  done
  exit_code=1
else
  echo "${green}OK"
fi
echo "${reset}"

echo -ne "Checking for API descriptions... "
files_need_description=()
# Check API schema definitions for field descriptions
for file in $(git diff --cached --name-only --diff-filter ACM | egrep "pkg/api/v.[^/]*/types\.go" | grep -v "third_party"); do
  # Check for files with fields without description tags
  descriptionless=$("${KUBE_HOOKS_DIR}/description.sh" "${file}")
  if [[ "$descriptionless" -eq "0" ]]; then
    files_need_description+=("${file}")
  fi
done

if [[ "${#files_need_description[@]}" -ne 0 ]]; then
  echo "${red}ERROR!"
  echo "Some API files are missing the required field descriptions."
  echo "Add description tags to all non-inline fields in the following files:"
  for file in "${files_need_description[@]}"; do
    echo "  ${file}"
  done
  exit_code=1
else
  echo "${green}OK"
fi
echo "${reset}"

echo -ne "Checking for docs that need updating... "
if ! hack/verify-gendocs.sh > /dev/null; then
  echo "${red}ERROR!"
  echo "Some docs are out of sync between CLI and markdown."
  echo "To regenerate docs, run:"
  echo "  hack/run-gendocs.sh"
  exit_code=1
else
  echo "${green}OK"
fi
echo "${reset}"

echo -ne "Checking for conversions that need updating... "
if ! hack/verify-generated-conversions.sh > /dev/null; then
  echo "${red}ERROR!"
  echo "Some conversions functions need regeneration."
  echo "To regenerate conversions, run:"
  echo "  hack/update-generated-conversions.sh"
  exit_code=1
else
  echo "${green}OK"
fi
echo "${reset}"

echo -ne "Checking for deep-copies that need updating... "
if ! hack/verify-generated-deep-copies.sh > /dev/null; then
  echo "${red}ERROR!"
  echo "Some deep-copy functions need regeneration."
  echo "To regenerate deep-copies, run:"
  echo "  hack/update-generated-deep-copies.sh"
  exit_code=1
else
  echo "${green}OK"
fi
echo "${reset}"

echo -ne "Checking for swagger spec that need updating... "
if ! hack/verify-swagger-spec.sh > /dev/null; then
  echo "${red}ERROR!"
  echo "Swagger spec needs to be updated."
  echo "To regenerate the spec, run:"
  echo "  hack/update-swagger-spec.sh"
  exit_code=1
else
  echo "${green}OK"
fi
echo "${reset}"

exit $exit_code
